@page
@using Utility.Enum
@model PetHealthCareSystemRazorPages.Pages.BookAppointment.BookingFormModel
@{
    ViewData["Title"] = "Book an Appointment";
}

<style>
    /* Additional CSS styles */
    .select-list {
        display: flex;
        overflow-x: auto;
        border: 1px solid #ccc;
        max-width: 100%;
    }

    .select-item {
        min-width: 200px;
        cursor: pointer;
        padding: 10px;
        border-right: 1px solid #ddd;
        flex-shrink: 0;
    }

        .select-item.selected-item {
            background-color: #007bff;
            color: #fff;
        }

        .select-item:last-child {
            border-right: none;
        }

    .time-slots {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        max-width: 100%;
        overflow-x: auto;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 20px;
    }

    .time-slot-item {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
    }

        .time-slot-item.selected-item {
            background-color: #007bff;
            color: #fff;
        }

    .main-body{
        margin-top: 100px;
    }
</style>

@if (Model != null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10 col-sm-12">
                <div class="main-body card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Book an Appointment</h4>
                    </div>
                    <div class="card-body">
                        <form method="post">
                            @if (Model.DisplayedPetList != null && Model.DisplayedPetList.Any())
                            {
                                <div class="form-group">
                                    <label>Select Pet (1 to 3)</label>
                                    <div id="pet-list" class="select-list">
                                        @foreach (var pet in Model.DisplayedPetList)
                                        {
                                            <div class="select-item" data-id="@pet.Id" data-type="pet">
                                                @pet.Name
                                            </div>
                                        }
                                    </div>
                                    <input type="hidden" id="selected-pet-id" name="petIdList" />
                                    <span id="pet-error" class="text-danger"></span>
                                </div>
                            }

                            @if (Model.DisplayedServiceList != null && Model.DisplayedServiceList.Any())
                            {
                                <div class="form-group">
                                    <label>Select Service (1 to 3)</label>
                                    <div id="service-list" class="select-list">
                                        @foreach (var service in Model.DisplayedServiceList)
                                        {
                                            <div class="select-item" data-id="@service.Id" data-type="service">
                                                @service.Name
                                            </div>
                                        }
                                    </div>
                                    <input type="hidden" id="selected-service-id" name="serviceIdList" />
                                    <span id="service-error" class="text-danger"></span>
                                </div>
                            }

                            @if (Model.AppointmentBookRequest != null)
                            {
                                <div class="form-group">
                                    <label asp-for="AppointmentBookRequest.AppointmentDate">Select Date</label>
                                    <input id="appointment-date" class="form-control" type="date" name="appointmentDate" required />
                                </div>

                                <div class="form-group">
                                    <label>Select Timeslot</label>
                                    <div id="time-slot-list" class="time-slots">
                                        @foreach (var timeSlot in Model.DisplayedTimeTableList)
                                        {
                                            <div class="time-slot-item" data-id="@timeSlot.Id" data-start-time="@timeSlot.StartTime" data-end-time="@timeSlot.EndTime">
                                                @($"{timeSlot.StartTime:hh\\:mm} - {timeSlot.EndTime:hh\\:mm}")
                                            </div>
                                        }
                                    </div>
                                    <input type="hidden" id="selected-timetable-id" name="timeTableId" />
                                </div>

                                <div class="form-group">
                                    <label>Select Vet</label>
                                    <div id="vet-list" class="select-list">
                                        <!-- The vet list will be populated dynamically -->
                                    </div>
                                    <input type="hidden" id="selected-vet-id" name="vetId" />
                                    <span id="vet-error" class="text-danger"></span>
                                    <p id="no-vets-message">No vets available for the selected date and time slot.</p>
                                </div>
                            }

                            <button type="submit" class="btn btn-primary btn-block">Book Appointment</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <p>Model is null.</p>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const selectedDate = document.getElementById("appointment-date");
            const timeSlotList = document.getElementById("time-slot-list");
            const petList = document.getElementById("pet-list");
            const selectedPetIdInput = document.getElementById("selected-pet-id");
            const serviceList = document.getElementById("service-list");
            const selectedServiceIdInput = document.getElementById("selected-service-id");
            const selectedTimeTableIdInput = document.getElementById("selected-timetable-id");
            const vetListContainer = document.getElementById("vet-list");
            const selectedVetIdInput = document.getElementById("selected-vet-id");
            const noVetsMessage = document.getElementById("no-vets-message");
            const form = document.querySelector("form");

            const petError = document.getElementById("pet-error");
            const serviceError = document.getElementById("service-error");
            const vetError = document.getElementById("vet-error");

            // Set default value for date input to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1); // Tomorrow's date

            let appointmentBookRequest = {
                petIdList: [],
                serviceIdList: [],
                appointmentDate: tomorrow,
                timeTableId: '',
                vetId: ''
            };

            // Set default value and min/max dates for appointment date
            selectedDate.valueAsDate = tomorrow; // Default value
            selectedDate.min = tomorrow.toISOString().split('T')[0]; // Minimum date
            const maxDate = new Date();
            maxDate.setDate(maxDate.getDate() + 15); // 15 days ahead
            selectedDate.max = maxDate.toISOString().split('T')[0]; // Maximum date

            // Event listeners
            selectedDate.addEventListener("change", handleDateChange);
            timeSlotList.addEventListener("click", handleTimeSlotSelect);
            petList.addEventListener("click", (event) => handleSelectItemClick(event, selectedPetIdInput, 'petIdList'));
            serviceList.addEventListener("click", (event) => handleSelectItemClick(event, selectedServiceIdInput, 'serviceIdList'));
            vetListContainer.addEventListener("click", (event) => handleVetSelection(event));
            form.addEventListener("submit", handleFormSubmit);

            function handleDateChange() {
                appointmentBookRequest.appointmentDate = selectedDate.value;
                console.log("Date changed: ", appointmentBookRequest);
            }

            function handleTimeSlotSelect(event) {
                const selectedSlot = event.target.closest('.time-slot-item');
                if (selectedSlot) {
                    // Clear previously selected slots
                    const selectedSlots = timeSlotList.querySelectorAll('.time-slot-item.selected-item');
                    selectedSlots.forEach(slot => slot.classList.remove('selected-item'));

                    // Highlight the clicked slot
                    selectedSlot.classList.add('selected-item');

                    appointmentBookRequest.timeTableId = selectedSlot.getAttribute('data-id');
                    selectedTimeTableIdInput.value = selectedSlot.getAttribute('data-id');

                    const startTime = selectedSlot.getAttribute('data-start-time');
                    const endTime = selectedSlot.getAttribute('data-end-time');
                    const date = selectedDate.valueAsDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD

                    console.log("Selected Time Slot: ", { timeTableId: appointmentBookRequest.timeTableId, startTime, endTime });

                    // Call function to load vets based on time slot
                    loadVetsByTimeSlot(date, appointmentBookRequest.timeTableId);
                }
            }

            function loadVetsByTimeSlot(date, timeTableId) {
                console.log("Loading vets for date: ", date, " and timeTableId: ", timeTableId);

                fetch(`/BookAppointment/BookingForm?handler=VetByDateAndTime&date=${date}&timeTableId=${timeTableId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Vets data: ", data);

                        vetListContainer.innerHTML = '';

                        if (data.length > 0) {
                            noVetsMessage.style.display = 'none';

                            // Populate the div with fetched vet data
                            data.forEach(vet => {
                                const vetItem = document.createElement("div");
                                vetItem.classList.add("select-item");
                                vetItem.setAttribute("data-id", vet.id);
                                vetItem.setAttribute("data-type", "vet");
                                vetItem.textContent = vet.fullName;
                                vetListContainer.appendChild(vetItem);
                            });
                        } else {
                            noVetsMessage.style.display = 'block';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching vets:', error);
                    });
            }

            function handleSelectItemClick(event, hiddenInput, type) {
                const selectedItem = event.target;
                if (selectedItem.classList.contains("select-item")) {
                    const itemId = selectedItem.getAttribute("data-id");
                    const itemType = selectedItem.getAttribute("data-type");
                    const isSelected = selectedItem.classList.contains("selected-item");

                    if (!isSelected && countSelectedItems(itemType) >= 3) {
                        alert(`You can select a maximum of 3 ${itemType}s.`);
                        return;
                    }

                    selectedItem.classList.toggle("selected-item");

                    updateSelectedItems(hiddenInput, type, itemType);
                }
            }

            function countSelectedItems(type) {
                const selectedItems = document.querySelectorAll(`.select-item.selected-item[data-type="${type}"]`);
                console.log(`Selected ${type}s count: `, selectedItems.length);
                return selectedItems.length;
            }

            function updateSelectedItems(hiddenInput, type, itemType) {
                const selectedIds = [];
                const selectedItems = document.querySelectorAll(`.select-item.selected-item[data-type="${itemType}"]`);
                selectedItems.forEach(item => {
                    selectedIds.push(parseInt(item.getAttribute("data-id")));
                });
                hiddenInput.value = selectedIds.join(","); // Store as comma-separated values

                appointmentBookRequest[type] = selectedIds;
                console.log(`Updated ${itemType} IDs: `, hiddenInput.value);
                console.log("Updated AppointmentBookRequest: ", appointmentBookRequest);
            }

            function handleVetSelection(event) {
                const selectedVet = event.target.closest('.select-item[data-type="vet"]');
                if (selectedVet) {
                    // Clear previously selected vet
                    const selectedVets = vetListContainer.querySelectorAll('.select-item.selected-item[data-type="vet"]');
                    selectedVets.forEach(vet => vet.classList.remove('selected-item'));

                    // Highlight the clicked vet
                    selectedVet.classList.add('selected-item');
                    selectedVetIdInput.value = selectedVet.getAttribute("data-id");

                    appointmentBookRequest.vetId = selectedVetIdInput.value;
                    console.log("Selected Vet ID: ", selectedVetIdInput.value);
                    console.log("Updated AppointmentBookRequest: ", appointmentBookRequest);
                }
            }

            function handleFormSubmit(event) {
                clearErrorMessages(); // Clear previous error messages
                if (!validateSelections()) {
                    event.preventDefault(); // Prevent form submission if validation fails
                }
            }

            function validateSelections() {
                let valid = true;

                const selectedPets = document.querySelectorAll('.select-item.selected-item[data-type="pet"]');
                const selectedServices = document.querySelectorAll('.select-item.selected-item[data-type="service"]');
                const selectedVets = document.querySelectorAll('.select-item.selected-item[data-type="vet"]');

                if (selectedPets.length === 0) {
                    petError.textContent = 'Please select at least one pet.';
                    valid = false;
                }

                if (selectedServices.length === 0) {
                    serviceError.textContent = 'Please select at least one service.';
                    valid = false;
                }

                if (selectedVets.length === 0) {
                    vetError.textContent = 'Please select one vet.';
                    valid = false;
                }

                return valid; // All validations passed
            }

            function clearErrorMessages() {
                petError.textContent = '';
                serviceError.textContent = '';
                vetError.textContent = '';
            }
        });
    </script>
}
