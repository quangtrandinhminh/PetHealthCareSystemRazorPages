@page
@using Utility.Enum
@model PetHealthCareSystemRazorPages.Pages.BookAppointment.BookingFormModel
@{
    ViewData["Title"] = "Book an Appointment";
}

<style>
    .select-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
        max-width: 100%;
        overflow-x: auto;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 20px;
    }

    .select-item {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
        height: 100px; /* Ensures all boxes have the same height */
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .select-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .select-item.selected-item {
            background-color: #007bff;
            color: #fff;
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

    .time-slots {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        max-width: 100%;
        overflow-x: auto;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 20px;
    }

    .time-slot-item {
        cursor: pointer;
        padding: 10px;
        border: 1px solid #ddd;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s, box-shadow 0.3s;
    }

        .time-slot-item:hover {
            background-color: #f2f2f2;
        }

        .time-slot-item.selected-item {
            background-color: #007bff;
            color: #fff;
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

    .main-body {
        margin-top: 100px;
    }

    .card-header {
        background-color: #007bff;
        color: #fff;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        transition: background-color 0.3s, border-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .form-control {
        border-color: #ccc;
        transition: border-color 0.3s;
    }

    .text-danger {
        color: #dc3545;
        transition: color 0.3s;
    }
</style>


@if (Model != null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-md-10 col-sm-12">
                <div class="main-body card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Book an Appointment</h4>
                    </div>
                    <div class="card-body">
                        <form method="post">
                            @if (Model.DisplayedPetList != null && Model.DisplayedPetList.Any())
                            {
                                <div class="form-group">
                                    <label>Select Pet</label>
                                    <div id="pet-list" class="select-list">
                                        @foreach (var pet in Model.DisplayedPetList)
                                        {
                                            <div class="select-item">
                                                <input type="radio" id="pet-@pet.Id" name="petId" value="@pet.Id">
                                                <label for="pet-@pet.Id">@pet.Name</label>
                                            </div>
                                        }
                                    </div>
                                    <span id="pet-error" class="text-danger"></span>
                                </div>
                            }

                            @if (Model.DisplayedServiceList != null && Model.DisplayedServiceList.Any())
                            {
                                <div class="form-group">
                                    <label>Select Service (Up to 3)</label>
                                    <div id="service-list" class="select-list">
                                        @foreach (var service in Model.DisplayedServiceList)
                                        {
                                            <div class="select-item" data-id="@service.Id" data-type="service">
                                                <span>@service.Name</span>
                                                <span>@service.Price VND</span>
                                            </div>
                                        }
                                    </div>
                                    <input type="hidden" id="selected-service-ids" name="serviceIds" />
                                    <span id="service-error" class="text-danger"></span>
                                </div>
                            }

                            @if (Model.AppointmentBookRequest != null)
                            {
                                <div class="form-group">
                                    <label asp-for="AppointmentBookRequest.AppointmentDate">Select Date</label>
                                    <input id="appointment-date" class="form-control" type="date" name="appointmentDate" required />
                                </div>

                                <div class="form-group">
                                    <label>Select Timeslot</label>
                                    <div id="time-slot-list" class="time-slots">
                                        @foreach (var timeSlot in Model.DisplayedTimeTableList)
                                        {
                                            <div class="time-slot-item" data-id="@timeSlot.Id" data-start-time="@timeSlot.StartTime" data-end-time="@timeSlot.EndTime">
                                                @($"{timeSlot.StartTime:hh\\:mm} - {timeSlot.EndTime:hh\\:mm}")
                                            </div>
                                        }
                                    </div>
                                    <input type="hidden" id="selected-timetable-id" name="timeTableId" />
                                </div>

                                <div class="form-group">
                                    <label>Select Vet</label>
                                    <div id="vet-list" class="select-list">
                                        <!-- The vet list will be populated dynamically -->
                                    </div>
                                    <input type="hidden" id="selected-vet-id" name="vetId" />
                                    <span id="vet-error" class="text-danger"></span>
                                    <p class="text-muted mt-2">Vets will be listed based on selected date and timeslot.</p>
                                </div>
                            }

                            <button type="submit" class="btn btn-primary btn-block">Book Appointment</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const petList = document.getElementById('pet-list');
            const serviceList = document.getElementById('service-list');
            const timeSlotList = document.getElementById('time-slot-list');
            const vetListContainer = document.getElementById('vet-list');
            const selectedServiceIdsInput = document.getElementById('selected-service-ids');
            const selectedTimetableIdInput = document.getElementById('selected-timetable-id');
            const selectedVetIdInput = document.getElementById('selected-vet-id');
            const appointmentDateInput = document.getElementById('appointment-date');

            const petError = document.getElementById('pet-error');
            const serviceError = document.getElementById('service-error');
            const vetError = document.getElementById('vet-error');

            let appointmentBookRequest = {
                petId: null,
                serviceIds: [],
                timetableId: null,
                vetId: null,
                appointmentDate: null
            };

            // Set date constraints
            setDateConstraints();

            petList.addEventListener('change', handlePetSelection);
            serviceList.addEventListener('click', handleServiceSelection);
            timeSlotList.addEventListener('click', handleTimeSlotSelection);
            vetListContainer.addEventListener('click', handleVetSelection);
            appointmentDateInput.addEventListener('change', handleDateChange);

            const form = document.querySelector('form');
            form.addEventListener('submit', handleFormSubmit);

            function setDateConstraints() {
                const today = new Date();
                const tomorrow = new Date(today);
                tomorrow.setDate(tomorrow.getDate() + 1);
                const nextMonth = new Date(today);
                nextMonth.setMonth(nextMonth.getMonth() + 1);

                const minDate = tomorrow.toISOString().split('T')[0];
                const maxDate = nextMonth.toISOString().split('T')[0];

                appointmentDateInput.setAttribute('min', minDate);
                appointmentDateInput.setAttribute('max', maxDate);
            }

            function handlePetSelection(event) {
                const selectedPet = event.target;
                appointmentBookRequest.petId = selectedPet.value;
                petError.textContent = '';
            }

            function handleServiceSelection(event) {
                const selectedService = event.target.closest('.select-item[data-type="service"]');
                if (selectedService) {
                    const serviceId = selectedService.getAttribute('data-id');
                    const isSelected = selectedService.classList.contains('selected-item');

                    if (isSelected) {
                        // Deselect service
                        selectedService.classList.remove('selected-item');
                        appointmentBookRequest.serviceIds = appointmentBookRequest.serviceIds.filter(id => id !== serviceId);
                    } else if (appointmentBookRequest.serviceIds.length < 3) {
                        // Select service
                        selectedService.classList.add('selected-item');
                        appointmentBookRequest.serviceIds.push(serviceId);
                    } else {
                        alert('You can select up to 3 services.');
                    }

                    selectedServiceIdsInput.value = appointmentBookRequest.serviceIds.join(',');
                    serviceError.textContent = '';
                }
            }

            function handleTimeSlotSelection(event) {
                const selectedTimeSlot = event.target.closest('.time-slot-item');
                if (selectedTimeSlot) {
                    const timeTableId = selectedTimeSlot.getAttribute('data-id');
                    const selectedTimeSlots = timeSlotList.querySelectorAll('.time-slot-item.selected-item');
                    selectedTimeSlots.forEach(slot => slot.classList.remove('selected-item'));

                    selectedTimeSlot.classList.add('selected-item');
                    appointmentBookRequest.timetableId = timeTableId;
                    selectedTimetableIdInput.value = timeTableId;
                    vetError.textContent = '';
                    fetchVets();
                }
            }

            function handleVetSelection(event) {
                const selectedVet = event.target.closest('.select-item[data-type="vet"]');
                if (selectedVet) {
                    const selectedVets = vetListContainer.querySelectorAll('.select-item.selected-item[data-type="vet"]');
                    selectedVets.forEach(vet => vet.classList.remove('selected-item'));

                    selectedVet.classList.add('selected-item');
                    appointmentBookRequest.vetId = selectedVet.getAttribute("data-id");
                    selectedVetIdInput.value = appointmentBookRequest.vetId;
                }
            }

            function handleDateChange() {
                appointmentBookRequest.appointmentDate = appointmentDateInput.value;
                fetchVets();
            }

            async function fetchVets() {
                const { appointmentDate, timetableId } = appointmentBookRequest;
                if (appointmentDate && timetableId) {
                    const response = await fetch(`./BookingForm?handler=VetByDateAndTime&date=${appointmentDate}&timeTableId=${timetableId}`);
                    const vets = await response.json();
                    populateVetList(vets);
                }
            }

            function populateVetList(vets) {
                vetListContainer.innerHTML = '';
                if (vets && vets.length > 0) {
                    vets.forEach(vet => {
                        const vetItem = document.createElement('div');
                        vetItem.classList.add('select-item');
                        vetItem.setAttribute('data-id', vet.id);
                        vetItem.setAttribute('data-type', 'vet');
                        vetItem.textContent = vet.fullName;
                        vetListContainer.appendChild(vetItem);
                    });
                }
            }

            function handleFormSubmit(event) {
                clearErrorMessages();
                if (!validateSelections()) {
                    event.preventDefault();
                }
            }

            function validateSelections() {
                let valid = true;

                const selectedPet = petList.querySelector('input[name="petId"]:checked');
                if (!selectedPet) {
                    petError.textContent = 'Please select a pet.';
                    valid = false;
                }

                if (appointmentBookRequest.serviceIds.length === 0) {
                    serviceError.textContent = 'Please select at least one service.';
                    valid = false;
                }

                if (!appointmentBookRequest.vetId) {
                    vetError.textContent = 'Please select a vet.';
                    valid = false;
                }

                return valid;
            }

            function clearErrorMessages() {
                petError.textContent = '';
                serviceError.textContent = '';
                vetError.textContent = '';
            }
        });
    </script>
}
